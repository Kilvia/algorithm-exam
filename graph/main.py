from adjlist import GraphAdjList
from adjmatrix import GraphAdjMatrix
from topsort import top_sort
from stronglyconn import conn
if __name__ == "__main__":
    print("======================================")
    print("Graph Represented by Adjacent Matrix")
    print("--------------------------------------")
    print("Undirected Graph")
    adjm = GraphAdjMatrix(5)
    adjm.add_vertex(1)
    adjm.add_vertex(2)
    adjm.add_vertex(3)
    adjm.add_vertex(4)
    adjm.add_vertex(5)
    adjm.add_edge(1, 2)
    adjm.add_edge(1, 5)
    adjm.add_edge(2, 3)
    adjm.add_edge(2, 4)
    adjm.add_edge(2, 5)
    adjm.add_edge(3, 4)
    adjm.add_edge(4, 5)
    adjm.print_graph()
    print("--------------------------------------")
    print("Directed Graph")
    adjm_d = GraphAdjMatrix(6, "directed")
    adjm_d.add_vertex(1)
    adjm_d.add_vertex(2)
    adjm_d.add_vertex(3)
    adjm_d.add_vertex(4)
    adjm_d.add_vertex(5)
    adjm_d.add_edge(1, 2)
    adjm_d.add_edge(1, 4)
    adjm_d.add_edge(2, 5)
    adjm_d.add_edge(3, 5)
    adjm_d.add_edge(3, 6)
    adjm_d.add_edge(4, 2)
    adjm_d.add_edge(5, 4)
    adjm_d.add_edge(6, 6)
    adjm_d.print_graph()
    print("**************************************")
    print("Graph Represented by Adjacent List")
    print("--------------------------------------")
    print("Undirected Graph")
    adjl = GraphAdjList(5)
    adjl.add_vertex(1)
    adjl.add_vertex(2)
    adjl.add_vertex(3)
    adjl.add_vertex(4)
    adjl.add_vertex(5)
    adjl.add_edge(1, 2)
    adjl.add_edge(1, 5)
    adjl.add_edge(2, 1)
    adjl.add_edge(2, 3)
    adjl.add_edge(2, 4)
    adjl.add_edge(2, 5)
    adjl.add_edge(3, 2)
    adjl.add_edge(3, 4)
    adjl.add_edge(4, 2)
    adjl.add_edge(4, 3)
    adjl.add_edge(4, 5)
    adjl.add_edge(5, 1)
    adjl.add_edge(5, 2)
    adjl.add_edge(5, 4)
    adjl.print_graph()
    print("--------------------------------------")
    print("Directed Graph")
    adjl_d = GraphAdjList(6)
    adjl_d.add_vertex(1)
    adjl_d.add_vertex(2)
    adjl_d.add_vertex(3)
    adjl_d.add_vertex(4)
    adjl_d.add_vertex(5)
    adjl_d.add_vertex(6)
    adjl_d.add_edge(1, 2)
    adjl_d.add_edge(1, 4)
    adjl_d.add_edge(2, 5)
    adjl_d.add_edge(3, 5)
    adjl_d.add_edge(3, 6)
    adjl_d.add_edge(4, 2)
    adjl_d.add_edge(5, 4)
    adjl_d.add_edge(6, 6)
    adjl_d.print_graph()
    print("**************************************")
    print("BFS")
    print("--------------------------------------")
    adjl.bfs(adjl.list[0])
    print("--------------------------------------")
    node_start = adjl.list[0]
    node_end = adjl.list[3]
    print("Search path from vertex", node_start.vertex, "to vertex", node_end.vertex)
    adjl.print_path(node_start, node_end)
    print("\n**************************************")
    print("DFS")
    print("--------------------------------------")
    adjl_d.dfs()
    print("**************************************")
    print("Topological Sort")
    print("--------------------------------------")
    top = top_sort(adjl_d)
    print("Result: ", end=" ")
    for i in top:
        print(i.vertex, end=" ")
    print()
    print("**************************************")
    print("Strongly Connected Components")
    print("--------------------------------------")
    conn(adjl_d)
